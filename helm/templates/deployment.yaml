apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.image.name }}-deploy"
  labels:
    deploy: {{ .Values.image.label }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate 
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Values.image.label }}
  template:
    metadata:
      labels:
        app: {{ .Values.image.label }}
    spec:
      containers:
      - image: "{{ .Values.repository.image }}:{{ .Values.repository.tag }}"
        imagePullPolicy: {{ .Values.repository.pullPolicy }}
        name: {{ .Values.image.name }}
        livenessProbe:
          httpGet:
            path: /api/healthcheck/poi
            port: {{ .Values.image.containerPort }}
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/healthcheck/poi
            port: {{ .Values.image.containerPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
        ports:
          - containerPort: {{ .Values.image.containerPort }}
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
        env:
          - name: WEB_SERVER_BASE_URI
            value: 'http://0.0.0.0'
          - name: WEB_PORT
            value: '8080'
          - name: ASPNETCORE_ENVIRONMENT
            value: 'Production'